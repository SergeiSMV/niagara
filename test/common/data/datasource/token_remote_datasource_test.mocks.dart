// Mocks generated by Mockito 5.4.4 from annotations
// in niagara_app/test/common/data/datasource/token_remote_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i5;
import 'package:either_dart/either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:niagara_app/core/core.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RequestHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestHandler extends _i1.Mock implements _i2.RequestHandler {
  MockRequestHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i2.Failure, D>> sendRequest<D>({
    required _i3.Future<_i5.Response<Map<String, dynamic>>> Function(_i5.Dio)?
        request,
    required D Function(Map<String, dynamic>)? converter,
    required _i2.Failure Function(String)? failure,
    bool? useCompute = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [],
          {
            #request: request,
            #converter: converter,
            #failure: failure,
            #useCompute: useCompute,
          },
        ),
        returnValue: _i3.Future<_i4.Either<_i2.Failure, D>>.value(
            _i6.dummyValue<_i4.Either<_i2.Failure, D>>(
          this,
          Invocation.method(
            #sendRequest,
            [],
            {
              #request: request,
              #converter: converter,
              #failure: failure,
              #useCompute: useCompute,
            },
          ),
        )),
      ) as _i3.Future<_i4.Either<_i2.Failure, D>>);
}
