import 'package:niagara_app/core/core.dart';
import 'package:niagara_app/core/utils/enums/auth_status.dart';

/// Репозиторий для работы с авторизацией.
///
/// Содержит методы для отправки кода подтверждения, проверки кода,
/// проверки статуса авторизации и пропуска авторизации.
abstract interface class IAuthRepository {
  /// Пропускает авторизацию.
  ///
  /// Возвращает:
  /// - [void] если авторизация была пропущена.
  /// - [Failure] если авторизация не была пропущена.
  Future<Either<Failure, void>> skipAuth();

  /// Отправляет код подтверждения на указанный номер телефона.
  ///
  /// - [phone] - номер телефона.
  ///
  /// Возвращает:
  /// - [void] если номер телефона был отправлен.
  /// - [Failure] если номер телефона не был отправлен.
  Future<Either<Failure, void>> sendPhone({required String phone});

  /// Проверяет код подтверждения.
  ///
  /// - [code] - код подтверждения.
  ///
  /// Возвращает:
  /// - [void] если код подтверждения верный.
  /// - [Failure] если код подтверждения не верный.
  Future<Either<Failure, void>> checkCode({required String code});

  /// Повторно отправляет код подтверждения.
  ///
  /// Возвращает:
  /// - [void] если код подтверждения был отправлен.
  /// - [Failure] если код подтверждения не был отправлен.
  Future<Either<Failure, void>> resendCode();

  /// Проверяет статус авторизации.
  ///
  /// Возвращает:
  /// - [AuthenticatedStatus] если статус авторизации был получен.
  /// - [Failure] если статус авторизации не был получен.
  Future<Either<Failure, AuthenticatedStatus>> checkAuthStatus();

  /// Вовзвращает [Stream] с изменениями статуса авторизации.
  ///
  /// **Важно**: нельзя использовать этот [Stream] для получения текущего
  /// статуса авторизации, т.к. события попадают в него только при изменении
  /// статуса. Попытка вызвать [Stream.last] приведёт к ошибке или вечному
  /// ожиданию, если за время работы приоложения статус авторизации не менялся.
  Stream<AuthenticatedStatus> get authStatusStream;

  /// Производит выход из аккаунта.
  ///
  /// Этот метод отправляет запрос на выход из аккаунта на сервер и в случае
  /// успеха меняет статус авторизации в локальном хранилище.
  ///
  /// Возвращает:
  /// - [void] если операция прошла успешно.
  /// - [Failure] если произошла ошибка.
  Future<Either<Failure, void>> logout();
}
